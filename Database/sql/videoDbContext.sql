CREATE TABLE algorithm (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    username text NOT NULL,
    name text NOT NULL,
    description text,
    max_item_weight integer NOT NULL,
    CONSTRAINT pk_algorithm PRIMARY KEY (id)
);


CREATE TABLE algorithm_item_info_entity (
    algorithm_id integer NOT NULL,
    playlist_id integer,
    channel_id integer,
    weight_multiplier double precision NOT NULL,
    folder text,
    max_item_weight integer NOT NULL,
    name text NOT NULL,
    unique_id text NOT NULL,
    video_count integer NOT NULL,
    failure_count integer NOT NULL
);


CREATE TABLE algorithm_video_entity (
    channel_id integer,
    playlist_id integer,
    video_id integer NOT NULL,
    in_memory_factor_increase double precision NOT NULL
);


CREATE TABLE channel (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    name text NOT NULL,
    unique_id text NOT NULL,
    handle text,
    description text,
    author_url text,
    thumbnails_json text,
    author_verified boolean NOT NULL,
    auto_generated boolean NOT NULL,
    sub_count integer NOT NULL,
    video_count integer NOT NULL,
    scraped_to_oldest boolean NOT NULL,
    date_last_scraped timestamp with time zone,
    scrape_failure_count smallint NOT NULL,
    CONSTRAINT pk_channel PRIMARY KEY (id)
);


CREATE TABLE invite_code (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    code text NOT NULL,
    remaining_uses integer NOT NULL,
    usage_count integer NOT NULL,
    CONSTRAINT pk_invite_code PRIMARY KEY (id)
);

CREATE TABLE playlist (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    title text NOT NULL,
    unique_id text NOT NULL,
    video_count integer NOT NULL,
    playlist_thumbnail text,
    author text,
    author_id text,
    author_url text,
    date_last_scraped timestamp with time zone,
    scrape_failure_count smallint NOT NULL,
    CONSTRAINT pk_playlist PRIMARY KEY (id)
);


CREATE TABLE algorithm_item (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    algorithm_id integer NOT NULL,
    playlist_id integer,
    channel_id integer,
    folder text,
    weight_multiplier double precision NOT NULL,
    CONSTRAINT pk_algorithm_item PRIMARY KEY (id),
    CONSTRAINT fk_algorithm_item_algorithm_algorithm_id FOREIGN KEY (algorithm_id) REFERENCES algorithm (id) ON DELETE CASCADE
);


CREATE TABLE video (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    channel_id integer,
    title text NOT NULL,
    unique_id text NOT NULL,
    author text NOT NULL,
    author_id text NOT NULL,
    author_url text,
    author_verified boolean NOT NULL,
    thumbnails_json text,
    description text,
    view_count bigint NOT NULL,
    length_seconds integer NOT NULL,
    estimated_published bigint,
    actual_published bigint,
    premiere_timestamp bigint,
    live_now boolean NOT NULL,
    premium boolean NOT NULL,
    is_upcoming boolean NOT NULL,
    CONSTRAINT pk_video PRIMARY KEY (id),
    CONSTRAINT fk_video_channel_channel_id FOREIGN KEY (channel_id) REFERENCES channel (id)
);


CREATE TABLE playlist_video (
    video_id integer NOT NULL,
    playlist_id integer NOT NULL,
    index integer NOT NULL,
    CONSTRAINT pk_playlist_video PRIMARY KEY (playlist_id, video_id),
    CONSTRAINT fk_playlist_video_playlist_playlist_id FOREIGN KEY (playlist_id) REFERENCES playlist (id) ON DELETE CASCADE,
    CONSTRAINT fk_playlist_video_video_video_id FOREIGN KEY (video_id) REFERENCES video (id) ON DELETE CASCADE
);


CREATE INDEX ix_algorithm_item_algorithm_id ON algorithm_item (algorithm_id);


CREATE UNIQUE INDEX ix_channel_unique_id ON channel (unique_id);


CREATE INDEX ix_playlist_video_video_id ON playlist_video (video_id);


CREATE INDEX ix_video_channel_id ON video (channel_id);


CREATE UNIQUE INDEX ix_video_unique_id ON video (unique_id);


