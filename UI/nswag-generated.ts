//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param searchText (optional) 
     * @return Success
     */
    searchChannels(searchText: string | undefined): Observable<FoundChannel[]> {
        let url_ = this.baseUrl + "/admin/api/search-channels?";
        if (searchText === null)
            throw new Error("The parameter 'searchText' cannot be null.");
        else if (searchText !== undefined)
            url_ += "searchText=" + encodeURIComponent("" + searchText) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchChannels(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchChannels(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FoundChannel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FoundChannel[]>;
        }));
    }

    protected processSearchChannels(response: HttpResponseBase): Observable<FoundChannel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as FoundChannel[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param username (optional) 
     * @return Success
     */
    searchAlgorithms(username: string | undefined): Observable<FoundAlgorithm[]> {
        let url_ = this.baseUrl + "/admin/api/search-algorithms?";
        if (username === null)
            throw new Error("The parameter 'username' cannot be null.");
        else if (username !== undefined)
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchAlgorithms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchAlgorithms(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FoundAlgorithm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FoundAlgorithm[]>;
        }));
    }

    protected processSearchAlgorithms(response: HttpResponseBase): Observable<FoundAlgorithm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as FoundAlgorithm[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getAlgorithm(algorithmId: number): Observable<LoadAlgorithmResult> {
        let url_ = this.baseUrl + "/admin/api/algorithm/{algorithmId}";
        if (algorithmId === undefined || algorithmId === null)
            throw new Error("The parameter 'algorithmId' must be defined.");
        url_ = url_.replace("{algorithmId}", encodeURIComponent("" + algorithmId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAlgorithm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAlgorithm(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoadAlgorithmResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoadAlgorithmResult>;
        }));
    }

    protected processGetAlgorithm(response: HttpResponseBase): Observable<LoadAlgorithmResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as LoadAlgorithmResult;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    deleteAlgorithm(algorithmId: number): Observable<void> {
        let url_ = this.baseUrl + "/admin/api/algorithms/{algorithmId}";
        if (algorithmId === undefined || algorithmId === null)
            throw new Error("The parameter 'algorithmId' must be defined.");
        url_ = url_.replace("{algorithmId}", encodeURIComponent("" + algorithmId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAlgorithm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAlgorithm(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteAlgorithm(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateAlgorithm(body: UpdateAlgorithmRequest | undefined): Observable<number> {
        let url_ = this.baseUrl + "/admin/api/algorithm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAlgorithm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAlgorithm(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processUpdateAlgorithm(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : _responseText as string;
            return throwException("validation issues", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getUserInfo(): Observable<UserInfo> {
        let url_ = this.baseUrl + "/admin/api/user-info";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserInfo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserInfo>;
        }));
    }

    protected processGetUserInfo(response: HttpResponseBase): Observable<UserInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UserInfo;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createUser(body: CreateAccountRequest | undefined): Observable<UserInfo> {
        let url_ = this.baseUrl + "/admin/api/create-user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserInfo>;
        }));
    }

    protected processCreateUser(response: HttpResponseBase): Observable<UserInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UserInfo;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Bad Request", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginRequest | undefined): Observable<UserInfo> {
        let url_ = this.baseUrl + "/admin/api/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserInfo>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<UserInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UserInfo;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Bad Request", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    logout(): Observable<void> {
        let url_ = this.baseUrl + "/admin/api/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changePassword(body: ChangePasswordRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/admin/api/change-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getVideo(username: string, algorithm: string, videoId: string): Observable<VideoResponse> {
        let url_ = this.baseUrl + "/{username}/{algorithm}/api/v1/videos/{videoId}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (algorithm === undefined || algorithm === null)
            throw new Error("The parameter 'algorithm' must be defined.");
        url_ = url_.replace("{algorithm}", encodeURIComponent("" + algorithm));
        if (videoId === undefined || videoId === null)
            throw new Error("The parameter 'videoId' must be defined.");
        url_ = url_.replace("{videoId}", encodeURIComponent("" + videoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVideo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVideo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VideoResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VideoResponse>;
        }));
    }

    protected processGetVideo(response: HttpResponseBase): Observable<VideoResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as VideoResponse;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param q (optional) 
     * @param page (optional) 
     * @param sort_By (optional) 
     * @param date (optional) 
     * @param duration (optional) 
     * @param type (optional) 
     * @param features (optional) 
     * @param region (optional) 
     * @return Success
     */
    getSearchResults(username: string, algorithm: string, q: string | undefined, page: number | undefined, sort_By: string | undefined, date: string | undefined, duration: string | undefined, type: string | undefined, features: string | undefined, region: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/{username}/{algorithm}/api/v1/search?";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (algorithm === undefined || algorithm === null)
            throw new Error("The parameter 'algorithm' must be defined.");
        url_ = url_.replace("{algorithm}", encodeURIComponent("" + algorithm));
        if (q === null)
            throw new Error("The parameter 'q' cannot be null.");
        else if (q !== undefined)
            url_ += "Q=" + encodeURIComponent("" + q) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sort_By === null)
            throw new Error("The parameter 'sort_By' cannot be null.");
        else if (sort_By !== undefined)
            url_ += "Sort_By=" + encodeURIComponent("" + sort_By) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "Date=" + encodeURIComponent("" + date) + "&";
        if (duration === null)
            throw new Error("The parameter 'duration' cannot be null.");
        else if (duration !== undefined)
            url_ += "Duration=" + encodeURIComponent("" + duration) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (features === null)
            throw new Error("The parameter 'features' cannot be null.");
        else if (features !== undefined)
            url_ += "Features=" + encodeURIComponent("" + features) + "&";
        if (region === null)
            throw new Error("The parameter 'region' cannot be null.");
        else if (region !== undefined)
            url_ += "Region=" + encodeURIComponent("" + region) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSearchResults(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSearchResults(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetSearchResults(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getChannel(channelId: string, username: string, algorithm: string): Observable<ChannelResponse> {
        let url_ = this.baseUrl + "/{username}/{algorithm}/api/v1/channels/{channelId}";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (algorithm === undefined || algorithm === null)
            throw new Error("The parameter 'algorithm' must be defined.");
        url_ = url_.replace("{algorithm}", encodeURIComponent("" + algorithm));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetChannel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetChannel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChannelResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChannelResponse>;
        }));
    }

    protected processGetChannel(response: HttpResponseBase): Observable<ChannelResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ChannelResponse;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getTrending(username: string, algorithm: string): Observable<VideoObject[]> {
        let url_ = this.baseUrl + "/{username}/{algorithm}/api/v1/trending";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (algorithm === undefined || algorithm === null)
            throw new Error("The parameter 'algorithm' must be defined.");
        url_ = url_.replace("{algorithm}", encodeURIComponent("" + algorithm));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTrending(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTrending(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VideoObject[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VideoObject[]>;
        }));
    }

    protected processGetTrending(response: HttpResponseBase): Observable<VideoObject[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as VideoObject[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getPopular(username: string, algorithm: string): Observable<PopularVideo[]> {
        let url_ = this.baseUrl + "/{username}/{algorithm}/api/v1/popular";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (algorithm === undefined || algorithm === null)
            throw new Error("The parameter 'algorithm' must be defined.");
        url_ = url_.replace("{algorithm}", encodeURIComponent("" + algorithm));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPopular(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPopular(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PopularVideo[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PopularVideo[]>;
        }));
    }

    protected processGetPopular(response: HttpResponseBase): Observable<PopularVideo[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PopularVideo[];
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param sort_by (optional) 
     * @param continuation (optional) 
     * @return Success
     */
    getChannelVideos(channelId: string, sort_by: string | undefined, continuation: string | undefined, username: string, algorithm: string): Observable<ChannelVideosResponse> {
        let url_ = this.baseUrl + "/{username}/{algorithm}/api/v1/channels/{channelId}/videos?";
        if (channelId === undefined || channelId === null)
            throw new Error("The parameter 'channelId' must be defined.");
        url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (algorithm === undefined || algorithm === null)
            throw new Error("The parameter 'algorithm' must be defined.");
        url_ = url_.replace("{algorithm}", encodeURIComponent("" + algorithm));
        if (sort_by === null)
            throw new Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "Sort_by=" + encodeURIComponent("" + sort_by) + "&";
        if (continuation === null)
            throw new Error("The parameter 'continuation' cannot be null.");
        else if (continuation !== undefined)
            url_ += "Continuation=" + encodeURIComponent("" + continuation) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetChannelVideos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetChannelVideos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChannelVideosResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChannelVideosResponse>;
        }));
    }

    protected processGetChannelVideos(response: HttpResponseBase): Observable<ChannelVideosResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ChannelVideosResponse;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getRootPage(): Observable<void> {
        let url_ = this.baseUrl + "/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRootPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRootPage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetRootPage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    viewAlgorithm(username: string, algorithmName: string): Observable<void> {
        let url_ = this.baseUrl + "/{username}/{algorithmName}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        if (algorithmName === undefined || algorithmName === null)
            throw new Error("The parameter 'algorithmName' must be defined.");
        url_ = url_.replace("{algorithmName}", encodeURIComponent("" + algorithmName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processViewAlgorithm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processViewAlgorithm(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processViewAlgorithm(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface AuthorThumbnail {
    url?: string | undefined;
    width?: number;
    height?: number;
}

export interface ChangePasswordRequest {
    oldPassword?: string | undefined;
    newPassword?: string | undefined;
}

export interface ChannelObject {
    author?: string | undefined;
    authorId?: string | undefined;
    authorUrl?: string | undefined;
    authorThumbnails?: AuthorThumbnail[] | undefined;
}

export interface ChannelResponse {
    author?: string | undefined;
    authorId?: string | undefined;
    authorUrl?: string | undefined;
    authorVerified?: boolean;
    authorBanners?: ImageObject[] | undefined;
    authorThumbnails?: AuthorThumbnail[] | undefined;
    subCount?: number;
    totalViews?: number;
    joined?: number;
    autoGenerated?: boolean;
    isFamilyFriendly?: boolean;
    description?: string | undefined;
    descriptionHtml?: string | undefined;
    allowedRegions?: string[] | undefined;
    tabs?: string[] | undefined;
    latestVideos?: VideoObject[] | undefined;
    relatedChannels?: ChannelObject[] | undefined;
}

export interface ChannelVideosResponse {
    videos?: VideoObject[] | undefined;
    continuation?: string | undefined;
}

export interface CreateAccountRequest {
    username?: string | undefined;
    password?: string | undefined;
}

export interface FoundAlgorithm {
    algorithmId?: number;
    username?: string | undefined;
    algorithmName?: string | undefined;
    description?: string | undefined;
}

export interface FoundChannel {
    type?: string | undefined;
    channelHandle?: string | undefined;
    description?: string | undefined;
    descriptionHtml?: string | undefined;
    author?: string | undefined;
    authorId?: string | undefined;
    authorUrl?: string | undefined;
    authorThumbnails?: AuthorThumbnail[] | undefined;
    authorVerified?: boolean;
    autoGenerated?: boolean;
    subCount?: number;
    videoCount?: number;
    channelId?: number | undefined;
    thumbnailUrl?: string | undefined;
}

export interface ImageObject {
    url?: string | undefined;
    width?: number;
    height?: number;
}

export interface LoadAlgorithmItem {
    channelGroupId?: number | undefined;
    channelId?: number | undefined;
    weightMultiplier?: number;
    maxChannelWeight?: number;
    name?: string | undefined;
}

export interface LoadAlgorithmResult {
    algorithmId?: number | undefined;
    username?: string | undefined;
    algorithmName?: string | undefined;
    description?: string | undefined;
    algorithmItems?: LoadAlgorithmItem[] | undefined;
}

export interface LoginRequest {
    username?: string | undefined;
    password?: string | undefined;
}

export interface PopularVideo {
    type?: string | undefined;
    title?: string | undefined;
    videoId?: string | undefined;
    videoThumbnails?: VideoThumbnail[] | undefined;
    lengthSeconds?: number;
    viewCount?: number;
    author?: string | undefined;
    authorId?: string | undefined;
    authorUrl?: string | undefined;
    published?: number;
    publishedText?: string | undefined;
}

export interface RecommendedVideo {
    videoId?: string | undefined;
    title?: string | undefined;
    videoThumbnails?: VideoThumbnail[] | undefined;
    author?: string | undefined;
    lengthSeconds?: number;
    viewCountText?: string | undefined;
    authorUrl?: string | undefined;
    authorId?: string | undefined;
    viewCount?: number;
}

export interface SearchResponse_Channel {
    type?: string | undefined;
    channelHandle?: string | undefined;
    description?: string | undefined;
    descriptionHtml?: string | undefined;
    author?: string | undefined;
    authorId?: string | undefined;
    authorUrl?: string | undefined;
    authorThumbnails?: AuthorThumbnail[] | undefined;
    authorVerified?: boolean;
    autoGenerated?: boolean;
    subCount?: number;
    videoCount?: number;
}

export interface UpdateAlgorithmItem {
    channelGroupId?: number | undefined;
    channelId?: number | undefined;
    newChannel?: SearchResponse_Channel;
    maxChannelWeight?: number;
    weightMultiplier?: number;
}

export interface UpdateAlgorithmRequest {
    algorithmId?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    algorithmItems?: UpdateAlgorithmItem[] | undefined;
}

export interface UserInfo {
    username?: string | undefined;
    isAdmin?: boolean;
    anyUsers?: boolean;
}

export interface VideoObject {
    type?: string | undefined;
    title?: string | undefined;
    videoId?: string | undefined;
    author?: string | undefined;
    authorId?: string | undefined;
    authorUrl?: string | undefined;
    authorVerified?: boolean;
    videoThumbnails?: VideoThumbnail[] | undefined;
    description?: string | undefined;
    descriptionHtml?: string | undefined;
    viewCount?: number;
    viewCountText?: string | undefined;
    lengthSeconds?: number;
    published?: number;
    publishedText?: string | undefined;
    premiereTimestamp?: number | undefined;
    liveNow?: boolean;
    premium?: boolean;
    isUpcoming?: boolean;
}

export interface VideoResponse {
    title?: string | undefined;
    videoId?: string | undefined;
    videoThumbnails?: VideoThumbnail[] | undefined;
    description?: string | undefined;
    descriptionHtml?: string | undefined;
    published?: number;
    publishedText?: string | undefined;
    keywords?: string[] | undefined;
    viewCount?: number;
    likeCount?: number;
    dislikeCount?: number;
    paid?: boolean;
    premium?: boolean;
    isFamilyFriendly?: boolean;
    allowedRegions?: string[] | undefined;
    genre?: string | undefined;
    genreUrl?: string | undefined;
    author?: string | undefined;
    authorId?: string | undefined;
    authorUrl?: string | undefined;
    authorThumbnails?: AuthorThumbnail[] | undefined;
    subCountText?: string | undefined;
    lengthSeconds?: number;
    allowRatings?: boolean;
    rating?: number;
    isListed?: boolean;
    liveNow?: boolean;
    isUpcoming?: boolean;
    premiereTimestamp?: number;
    hlsUrl?: string | undefined;
    adaptiveFormats?: any[] | undefined;
    formatStreams?: any[] | undefined;
    captions?: any[] | undefined;
    recommendedVideos?: RecommendedVideo[] | undefined;
    type?: string | undefined;
    dashUrl?: string | undefined;
    authorVerified?: boolean;
}

export interface VideoThumbnail {
    quality?: string | undefined;
    url?: string | undefined;
    width?: number;
    height?: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}